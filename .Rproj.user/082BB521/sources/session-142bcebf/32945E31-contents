---
title: "Untitled"
---


## Setup

Carregar os pacotes
```{r}
#| label: setup

# Pacotes gerais
library(tidyverse)
library(here)

# Pacotes geoestatísticos
library(sp)
library(sf)
library(spdep)
library(tmap)
library(geobr)
library(aopdata)
```

Definir os objetos
```{r}
#| label: download-objects
#| eval: false

# Download objects to PC
read_municipality(code_muni = 3106200) %>% 
  saveRDS(here("data/rds/shp_bhz.RDS"))

read_urban_area() %>% 
  filter(code_muni == 3106200) %>% 
  saveRDS(here("data/rds/shp_bhz_urban.RDS"))

read_access(city = "belo horizonte", mode = "public_transport", peak = T, year = 2019, geometry = T) %>% 
  saveRDS(here("data/rds/shp_aop_bhz.RDS"))
```

Tratar dataset do metrô importado do MapHub
```{r}
#| label: load-metro
shp_bhz <- readRDS(here("data/rds/shp_bhz.RDS"))

# load shapefile
shp_metro <- read_sf(
  here("data/shp/rtm-2042.geojson")
) %>% 
  st_transform(
    crs = st_crs(shp_bhz)
  )

# Grouping lines following MapHub's groups
shp_metro <- shp_metro %>% 
  mutate(group = as.character(group)) %>% 
  mutate(
    group = case_match(
      group,
      "1962955842" ~ "Linha 1",
      "3668941906" ~ "Linha 1 oeste",
      "3401983206" ~ "Linha 2",
      "4126401456" ~ "Linha 2 centro",
      "2431136716" ~ "Linha 3",
      "3914432642" ~ "Linha 3 via Pernambuco",
      "2634790232" ~ "Linha 3 sul",
      "2519972260" ~ "Linha 3 Belvedere",
      "234543655" ~ "Linha 3 norte",
      "3838837030" ~ "Linha 4",
      "3738858743" ~ "Linha 4 oeste",
      "926197960" ~ "Linha 5",
      "696204033" ~ "Linha 6",
      c("267488831", NA) ~ "Shenanigans"
    )
  )

# other tidying: unifying color data, removing shenanigans, and categorizing lines and stations
shp_metro <- shp_metro %>% 
  mutate(color = coalesce(fill, stroke, `marker-color`)) %>% 
  select(-c(fill, stroke, `marker-color`)) %>% 
  filter(group != "Shenanigans") %>% 
  mutate(
    category = ifelse(
      str_detect(title, "Linha"),
      "Linha", 
      ifelse(
        str_detect(title, "Metrô Leve"),
        "Linha",
        "Estação"
      )
    )
  ) %>% 
  relocate(title, description, group, category, color, visible, geometry)

shp_metro %>% 
  saveRDS(here("data/rds/shp_metro.RDS"))

remove(shp_metro)
```



Carregar os objetos
```{r}
#| label: load-objects

# Load objects from PC
shp_bhz_urban <- readRDS(here("data/rds/shp_bhz_urban.RDS"))
shp_aop <- readRDS(here("data/rds/shp_aop_bhz.RDS")) %>% 
  st_transform(crs = st_crs(shp_bhz))
shp_metro <- readRDS(here("data/rds/shp_metro.RDS"))

# Selecting variables from AOP dataset
shp_aop <- shp_aop %>% 
  select(year, id_hex, 
         P001:P007, R001, R003, T001:T004, E001, S001,
         CMATT60, CMAST60, CMAET60) #%>% 
  #na.omit()

# Transforming data
shp_aop <- shp_aop %>% 
  mutate(
    CMATT60 = 100*CMATT60/sum(T001), CMAST60 = 100*CMAST60/sum(S001), CMAET60 = 100*CMAET60/sum(E001),
    R001_log = log(R001)
  )

# subsetting metro network planned to 2023
shp_metro_2032 <- shp_metro %>% 
  filter(
    group %in% c("Linha 1", "Linha 2", 'Linha 2 centro', "Linha 3"),
    is.na(visible)
  )

shp_metro_2042 <- shp_metro %>% 
  filter(
    group %in% c("Linha 1", "Linha 1 oeste",
                 "Linha 2", "Linha 2 centro", 
                 "Linha 3", "Linha 3 sul",
                 "Linha 4", "Linha 5"),
    is.na(visible)
  )

# joining aop and metro stations
shp_aop_metro <- shp_aop %>% 
  st_join(
    shp_metro_2032 %>% filter(category == "Estação"),
    st_intersects,
    left = F
  ) %>% 
  distinct()

shp_aop_metro <- shp_aop %>% 
  st_filter(shp_aop_metro, .predicate = st_intersects) 

shp_aop_metro <- shp_aop %>% 
  st_filter(shp_aop_metro, .predicate = st_intersects)
```



## Mapas!

Mapa base
```{r}
m_base <- shp_bhz %>% 
  ggplot() +
  geom_sf(fill = NA) +
  # geom_sf(
  #   data = shp_aop,
  #   color = NA,
  #   fill = "lightgrey"
  # ) +
  theme_void()
```


Mapas socioeconômicos ao redor do metrô
```{r}
geom_aop <- function(basemap, shp, x, viridis_pal, legend, title, color = NA, alpha = 1, scale_na = 0) {
  if(missing(basemap)) {
    list(
      geom_sf(
        data = shp,
        aes(fill = {{x}}),
        color = NA,
        alpha = 1
        ),
      scale_fill_viridis_c(option = viridis_pal, name = legend, na.value = scale_na),
      labs(title = title),
      theme_void()
    )
  } else {
    list(
      geom_sf(
        data = shp,
        aes(fill = {{x}}),
        color = NA,
        alpha = 1
        ),
      scale_fill_viridis_c(option = viridis_pal, name = legend, na.value = scale_na),
      labs(title = title),
      geom_sf(data = basemap, fill = NA),
      theme_void()
    )
  }
}

m_job <- ggplot() +
  geom_aop(
    shp_bhz,
    shp_aop, T001, 
    "D", 
    "Postos de trabalho", 
    "Postos de trabalho ao redor das estações de metrô"
  )

m_pop <- ggplot() +
  geom_aop(
    shp_bhz,
    shp_aop, P001, 
    "D", 
    "Habitantes", 
    "População ao redor das estações de metrô"
  )

m_inc <- ggplot() +
  geom_aop(
    shp_bhz,
    shp_aop, R001, 
    "D", 
    "Renda média (R$)", 
    "Renda média ao redor das estações de metrô"
  )

m_job
m_pop
m_inc
```


Mapa do metrô
```{r}
metro_pal <- shp_metro %>% 
  filter(is.na(visible)) %>% 
  distinct(group, color) %>% 
  pull(color) %>% 
  set_names(shp_metro %>% distinct(group) %>% pull(group))

m_metro <- ggplot() +
  # geom_sf(
  #   data = shp_aop_metro,
  #   aes(fill = T001),
  #   color = NA,
  #   alpha = 0.9
  # ) +
  # scale_fill_viridis_c(option = "D", name = "Postos de trabalho") +
  geom_sf(
    data = shp_metro_2032 %>% filter(category == "Linha"),
    color = "white",
    lwd = 1
  ) +
  geom_sf(
    data = shp_metro_2032 %>% filter(category == "Linha"),
    aes(color = group),
    lwd = 0.5
  ) +
  geom_sf(
    data = shp_metro_2032 %>% filter(category == "Estação"),
    color = "white",
    size = 1.2
  ) +
  geom_sf(
    data = shp_metro_2032 %>% filter(category == "Estação"),
    size = 0.6
  ) +
  scale_color_manual(
    values = metro_pal, 
    name = ""
  ) +
  theme_void()

geom_metro <- function(shp, cat_line, cat_station, group) {
  list(
    geom_sf(
    data = shp %>% filter(category == cat_line),
    color = "white",
    lwd = 1
    ),
  geom_sf(
    data = shp %>% filter(category == cat_line),
    aes(color = group),
    lwd = 0.5
    ),
  geom_sf(
    data = shp %>% filter(category == cat_station),
    color = "white",
    size = 1.2
    ),
  geom_sf(
    data = shp %>% filter(category == cat_station),
    size = 0.6
    ),
  scale_color_manual(
    values = metro_pal, 
    name = ""
    )
  )
}
```

Juntando
```{r}

# emprego
m_job + 
  geom_metro(shp_metro_2042, "Linha", "Estação", group) +
  labs(subtitle = "Horizonte: 2042")

m_job + 
  geom_metro(shp_metro_2042, "Linha", "Estação", group) +
  labs(subtitle = "Horizonte: 2042") +
  xlim(-43.97, -43.91) +
  ylim(-19.95, -19.90)


# população
m_pop + 
  geom_metro(shp_metro_2042, "Linha", "Estação", group) +
  labs(subtitle = "Horizonte: 2042")

m_pop + 
  geom_metro(shp_metro_2042, "Linha", "Estação", group) +
  labs(subtitle = "Horizonte: 2042") +
  xlim(-43.97, -43.91) +
  ylim(-19.95, -19.90)


# renda
m_inc + 
  geom_metro(shp_metro_2042, "Linha", "Estação", group) +
  labs(subtitle = "Horizonte: 2042") 

m_inc + 
  geom_metro(shp_metro_2042, "Linha", "Estação", group) +
  labs(subtitle = "Horizonte: 2042") +
  xlim(-43.97, -43.91) +
  ylim(-19.947, -19.905)
```


## Slopes

```{r}
library(jsonlite)
library(ggmap)
library(httr)

stations <- shp_metro_2042 %>% 
  filter(
    group %in% c("Linha 3", "Linha 3 Belvedere"),
    category == "Estação"
  )
  
coords_points <- stations %>% 
  st_transform(crs = 4326) %>% 
  st_coordinates() %>% 
  as_data_frame() %>% 
  rename(lon = X, lat = Y)

key <- 'AIzaSyAvz6XZFHixb3Ia98L_Y3351IJq0puMMrQ'

register_google(key)

url <- "https://maps.googleapis.com/maps/api/elevation/json"

req <- GET(
  url, 
  query = list(
    locations = paste(paste(coords_points$lat, coords_points$lon, sep = ","), collapse = "|"), 
    key = key
  )
)

coords_points <- coords_points %>% 
  mutate(elev = elevation$results$elevation) %>% 
  st_as_sf(
    coords = c("lon", "lat", "elev"),
    crs = 4326
  ) %>% 
  st_transform(crs = 4674)

st_geometry(stations) <- st_geometry(coords_points)

stations <- stations %>% 
  cbind(elevation$results$elevation)
```


```{r}
# calculate distance between consecutive points

slope <- stations[1:5,] %>% 
  rbind(stations[7:8,]) %>% 
  rbind(stations[6,]) %>%
  rbind(stations[9,]) %>%
  rbind(stations[10,]) %>%
  mutate(dist = st_distance(geometry, lag(geometry))) #%>%
  filter(!is.na(dist))  # remove first row where distance is NA

# calculate elevation difference and slope between consecutive points
slope <- slope %>%
  mutate(elev_diff = hp - lag(hp),
         slope = 100 * elev_diff / dist)  # calculate slope in percentage
```





